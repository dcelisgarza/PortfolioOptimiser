using Test
using PortfolioOptimiser, CSV, DataFrames, Statistics, CovarianceEstimation

# @testset "Expected returns" begin
df = CSV.read("./test/assets/stock_prices.csv", DataFrame)
dropmissing!(df)
returns = returns_from_prices(df[!, 2:end])

# Mean returns.
mu = ret_model(MRet(), Matrix(returns))
mutest = [
    0.0006064821858973168,
    0.000669021311430873,
    0.000847687933612784,
    0.0006982516372635583,
    0.0016329295372448094,
    -0.0006601113973836448,
    0.0010584278216174692,
    0.00022870029930466274,
    0.000690300731558402,
    0.0003212035985447059,
    0.00021047516560557256,
    -0.0007980845181260188,
    -0.002294228795169384,
    -0.0001155297273487399,
    -0.0017309474736018071,
    0.0009062844477107923,
    0.0009269588800715489,
    0.0003236551893266437,
    0.0007698566226528314,
    0.0005694416747941133,
]
@test mu ≈ mutest

mu = ret_model(MRet(), Matrix(returns); compound = false)
mutest = [
    0.000709977675346526,
    0.0007746382686595028,
    0.0009753484800445194,
    0.0008974890088837391,
    0.0017956125285473906,
    -0.0005706669410836582,
    0.0018453756491976943,
    0.00031058221073110553,
    0.0008285462729038383,
    0.000442742392951942,
    0.0002631446419061841,
    -0.00043554694545677394,
    -0.0013430732876448975,
    -4.376248452713041e-5,
    -0.0012358294979836018,
    0.0011544951216372085,
    0.0010079029335960455,
    0.0003844034306609158,
    0.0008621888482796794,
    0.0006486846462746492,
]
@test mu ≈ mutest

# Exponential returns.
mu = ret_model(EMRet(), Matrix(returns); span = 500)
mutest = [
    0.0006374763006407047,
    0.0009220927701596437,
    0.0006646681631425899,
    0.001302377530317811,
    0.0018723319487876644,
    -0.002061008383108298,
    0.0010703399637868038,
    0.00044720622951577305,
    0.0011968461569153988,
    0.0005206580308783071,
    4.138292505451169e-5,
    -0.0005065094094284239,
    -0.002005000646035593,
    -5.139201678172611e-5,
    -0.001362216247220993,
    0.0016463498966041712,
    0.0013578359093076031,
    0.00037279054675387613,
    0.0011016401802894649,
    0.0003773460829119557,
]
@test mu ≈ mutest

mu = ret_model(EMRet(), Matrix(returns); compound = false, span = 500)
mutest = [
    0.0006374763006407111,
    0.0009220927701595434,
    0.0006646681631425893,
    0.001302377530317905,
    0.0018723319487877312,
    -0.002061008383108338,
    0.0010703399637868522,
    0.00044720622951572713,
    0.0011968461569154484,
    0.0005206580308782243,
    4.138292505442201e-5,
    -0.0005065094094283773,
    -0.0020050006460355933,
    -5.139201678172075e-5,
    -0.0013622162472209415,
    0.0016463498966041731,
    0.0013578359093076027,
    0.00037279054675381314,
    0.0011016401802895139,
    0.0003773460829118876,
]
@test mu ≈ mutest

# CAPM rets.
mu = ret_model(CAPMRet(), Matrix(returns); fix_method = DFix())
mutest = [
    0.0036283562775177997,
    0.0034544240730971718,
    0.001830822739356211,
    -0.00044793660988032974,
    0.0013709637242854018,
    0.004890268998912517,
    -0.017476609226325986,
    0.00985224146724208,
    -0.0023952925805466943,
    0.001483562463334781,
    0.010627449323332663,
    -0.007252216398726474,
    -0.01876389759600505,
    0.00637296754474876,
    -0.007275249409044265,
    -0.0005368115714965115,
    0.0033605417366746777,
    0.00867813044670313,
    0.000962059596703306,
    0.005891292317378512,
]
@test mu ≈ mutest

mu = ret_model(CAPMRet(), Matrix(returns); fix_method = FFix())
mutest = [
    0.003628356277517824,
    0.003454424073097196,
    0.0018308227393562353,
    -0.00044793660988030545,
    0.0013709637242854296,
    0.004890268998912532,
    -0.017476609226325924,
    0.00985224146724209,
    -0.0023952925805466735,
    0.0014835624633348088,
    0.010627449323332675,
    -0.0072522163987264465,
    -0.018763897596004993,
    0.006372967544748779,
    -0.0072752494090442335,
    -0.0005368115714964837,
    0.0033605417366746985,
    0.00867813044670314,
    0.0009620595967033338,
    0.005891292317378541,
]
@test mu ≈ mutest

mu = ret_model(CAPMRet(), Matrix(returns); freq = 1, compound = false)
mutest = [
    0.0036708660828461415,
    0.0034973855022377327,
    0.0018779999319105158,
    -0.0003948425028140676,
    0.0014193349641534979,
    0.004929502183698822,
    -0.017379299305002097,
    0.009878590638226914,
    -0.002337142064690871,
    0.0015316413348519485,
    0.010651785627704347,
    -0.007181454633230406,
    -0.01866324516497817,
    0.006408350827374206,
    -0.007204427837165808,
    -0.0004834866960736345,
    0.0034037469360751263,
    0.008707528256649512,
    0.0010114925769290697,
    0.0059279262942222195,
]
@test mu ≈ mutest

mu = ret_model(ECAPMRet(), Matrix(returns); rspan = 500, cspan = 500)
mutest = [
    0.002425766430924195,
    0.0037932743075672452,
    0.0015393850842733425,
    -0.001101075572378627,
    0.002603701097116981,
    0.004486169244526831,
    -0.014136742603346557,
    0.008179803686949878,
    -0.0010447855727304216,
    0.0012562468088357162,
    0.009816905011299058,
    -0.010026507305314819,
    -0.023806896153914046,
    0.007825798628778559,
    -0.008355533506815997,
    0.0006869146069906455,
    0.004356001884841528,
    0.00845833110042058,
    0.002158582295597438,
    0.008429876458870294,
]
@test mu ≈ mutest

mu = ret_model(
    ECAPMRet(),
    Matrix(returns);
    compound = false,
    rspan = 500,
    cspan = 500,
    fix_method = DFix(),
    freq = 1,
)
mutest = [
    0.002425766430924167,
    0.0037932743075672175,
    0.0015393850842733148,
    -0.0011010755723786583,
    0.0026037010971169533,
    0.004486169244526807,
    -0.014136742603346613,
    0.00817980368694986,
    -0.0010447855727304563,
    0.001256246808835685,
    0.009816905011299042,
    -0.010026507305314868,
    -0.023806896153914115,
    0.00782579862877854,
    -0.008355533506816042,
    0.0006869146069906143,
    0.0043560018848415,
    0.00845833110042056,
    0.0021585822955974103,
    0.008429876458870276,
]
@test mu ≈ mutest

mu = ret_model(
    ECAPMRet(),
    Matrix(returns);
    compound = false,
    rspan = 500,
    cspan = 500,
    fix_method = FFix(),
)

mutest = [
    0.002425766430924167,
    0.0037932743075672175,
    0.0015393850842733148,
    -0.0011010755723786583,
    0.0026037010971169533,
    0.004486169244526807,
    -0.014136742603346613,
    0.00817980368694986,
    -0.0010447855727304563,
    0.001256246808835685,
    0.009816905011299042,
    -0.010026507305314868,
    -0.023806896153914115,
    0.00782579862877854,
    -0.008355533506816042,
    0.0006869146069906143,
    0.0043560018848415,
    0.00845833110042056,
    0.0021585822955974103,
    0.008429876458870276,
]
@test mu ≈ mutest

market_returns = vec(mean(Matrix(returns), dims = 2))
mu = ret_model(CAPMRet(), Matrix(returns), market_returns)
mu2 = ret_model(CAPMRet(), Matrix(returns))
@test mu ≈ mu2

mu = ret_model(ECAPMRet(), Matrix(returns), market_returns)
mu2 = ret_model(ECAPMRet(), Matrix(returns))
@test mu ≈ mu2

returns = returns_from_prices(df[!, 2:end])
log_returns = returns_from_prices(df[!, 2:end], true)
@test exp.(log_returns) .- 1 ≈ returns

rel_prices = prices_from_returns(Matrix(returns[!, :]))
rel_prices_log = prices_from_returns(Matrix(log_returns[!, :]), true)
@test rel_prices ≈ rel_prices_log

reconstructed_prices = (rel_prices' .* Vector(df[1, 2:end]))'

@test reconstructed_prices ≈ Matrix(df[!, 2:end])

target = DiagonalUnequalVariance()
shrinkage = :lw
method = LinearShrinkage(target, shrinkage)

capm_ret = ret_model(
    CAPMRet(),
    Matrix(returns),
    cov_type = CustomCov(),
    custom_cov_estimator = method,
)

@test capm_ret ≈ [
    0.0040879253430701964,
    0.0039188755965145206,
    0.0023408504407325427,
    0.000126058236304398,
    0.0018939001464612082,
    0.005314414862005181,
    -0.01642460183023518,
    0.010137099602772273,
    -0.001766633427044556,
    0.0020033381218044835,
    0.010890546568137927,
    -0.006487218342520581,
    -0.01767575467661688,
    0.0067554925176756975,
    -0.006509604792284768,
    3.9678087289395786e-5,
    0.003827628634911616,
    0.008995947099637587,
    0.0014964743829944602,
    0.006287338414872695,
]

exp_capm_ret = ret_model(
    ECAPMRet(),
    Matrix(returns),
    cspan = 1503,
    rspan = 1503,
    cov_type = CustomCov(),
    custom_cov_estimator = method,
)
@test exp_capm_ret ≈ [
    0.004124120392523235,
    0.003955455181866775,
    0.0023810195453513386,
    0.0001712653083219065,
    0.0019350859247918226,
    0.005347820027062338,
    -0.016341747124423548,
    0.01015953465133287,
    -0.001717121066758153,
    0.002044274962582013,
    0.010911267757836015,
    -0.006426968111268461,
    -0.017590053984965912,
    0.006785619676681648,
    -0.006449303638781857,
    8.508164743512014e-5,
    0.003864415778885792,
    0.009020977917271352,
    0.0015385641820434733,
    0.006318530479698154,
]

target = DiagonalCommonVariance()
shrinkage = :oas
method = LinearShrinkage(target, shrinkage)

mean_ret = ret_model(
    CAPMRet(),
    Matrix(returns),
    cov_type = CustomSCov(),
    custom_cov_estimator = method,
)
@test mean_ret ≈ [
    0.0021844529933981033,
    0.002599297776524373,
    -0.0002441812104240354,
    -0.0037398873746938913,
    0.00046250105355785665,
    0.0018519898534218038,
    -0.020150526029577998,
    0.007702673301632889,
    -0.004112489057222862,
    -0.0015448792920951908,
    0.00884376325819063,
    -0.008724764251200137,
    -0.020322769256538458,
    0.004775613216641703,
    -0.01245681122670039,
    -0.0013808615289992617,
    0.0023833346662244376,
    0.007650116662995306,
    9.377078741404019e-5,
    0.004899895846971416,
]

mean_ret = ret_model(
    ECAPMRet(),
    Matrix(returns),
    cspan = 447.5,
    rspan = 447.5,
    cov_type = CustomSCov(),
    custom_cov_estimator = method,
)

@test mean_ret ≈ [
    0.002135037161166139,
    0.0025510326190484357,
    -0.00030033346115184226,
    -0.003805735832295494,
    0.0004083089611224243,
    0.001801651852325628,
    -0.02026189345812608,
    0.007668563620195492,
    -0.004179371017878082,
    -0.0016046393511133933,
    0.008812818672376396,
    -0.008804439499488271,
    -0.02043461444433824,
    0.004733384609075393,
    -0.012546838231639882,
    -0.001440166644127095,
    0.00233447048157168,
    0.0076158612027032585,
    3.8555930257217624e-5,
    0.004858011968063028,
]
# end