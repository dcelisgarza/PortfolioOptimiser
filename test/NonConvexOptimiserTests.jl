using Test, CSV, DataFrames
using PortfolioOptimiser.EfficientFrontierOptimiser,
    PortfolioOptimiser.ExpectedReturns,
    PortfolioOptimiser.RiskModels,
    PortfolioOptimiser.BaseOptimiser

@testset "Non convex optimiser" begin
    # Reading in the data; preparing expected returns and a risk model
    df = CSV.read("./assets/stock_prices.csv", DataFrame)
    returns = returns_from_prices(df[!, 2:end])

    mu = ret_model(MeanRet(), Matrix(dropmissing(returns)))
    mutest = [
        0.165077005733385
        0.183572017421321
        0.238036763838874
        0.192316447138601
        0.508570682802054
        -0.153295057043960
        0.305495623268028
        0.059318615800612
        0.189931534062078
        0.084295329365638
        0.054465665833134
        -0.182249168372897
        -0.439434885859736
        -0.028695410193010
        -0.353755082717798
        0.256437396469586
        0.262994437027811
        0.084965198887185
        0.214010363955894
        0.154258862256590
    ]
    @test mu â‰ˆ mutest

    S = risk_matrix(SampleCov(), Matrix(dropmissing(returns)))
    Stest = reshape(
        [
            0.05291391,
            0.02470526,
            0.03547498,
            0.02979338,
            0.03991589,
            0.01563105,
            0.02072606,
            0.01052821,
            0.02282403,
            0.01805755,
            0.01015736,
            0.02578005,
            0.00903269,
            0.01343671,
            0.0061719,
            0.01262139,
            0.02482871,
            0.01485159,
            0.01988721,
            0.02093733,
            0.02470526,
            0.05330391,
            0.02750585,
            0.02383911,
            0.0270339,
            0.01466275,
            0.03281958,
            0.01146578,
            0.02376981,
            0.01912161,
            0.01053111,
            0.02301859,
            0.01800508,
            0.01484941,
            0.01364317,
            0.01873152,
            0.02333124,
            0.01284237,
            0.02159496,
            0.01805024,
            0.03547498,
            0.02750585,
            0.06482484,
            0.03007347,
            0.03864243,
            0.01689677,
            0.02950461,
            0.00973862,
            0.0238058,
            0.01918338,
            0.00982742,
            0.03475784,
            0.01470497,
            0.01322401,
            0.01093452,
            0.0142271,
            0.02562083,
            0.01367014,
            0.02049703,
            0.02218337,
            0.02979338,
            0.02383911,
            0.03007347,
            0.10095819,
            0.0334143,
            0.01640913,
            0.05056893,
            0.00873214,
            0.02466363,
            0.02055424,
            0.00720374,
            0.02795377,
            0.02531506,
            0.01419388,
            0.0242902,
            0.01963273,
            0.02543588,
            0.01316214,
            0.0212884,
            0.01742705,
            0.03991589,
            0.0270339,
            0.03864243,
            0.0334143,
            0.08343832,
            0.01301508,
            0.0304337,
            0.00927582,
            0.02221335,
            0.01662241,
            0.00939684,
            0.03003391,
            0.00490042,
            0.01290541,
            0.01952979,
            0.01439141,
            0.02633141,
            0.0117056,
            0.01896013,
            0.02516758,
            0.01563105,
            0.01466275,
            0.01689677,
            0.01640913,
            0.01301508,
            0.04513011,
            0.02383066,
            0.00964842,
            0.02510493,
            0.02187409,
            0.01329889,
            0.02689485,
            0.02902296,
            0.01750551,
            0.0253728,
            0.01202254,
            0.0163072,
            0.01415455,
            0.0230049,
            0.01547698,
            0.02072606,
            0.03281958,
            0.02950461,
            0.05056893,
            0.0304337,
            0.02383066,
            0.41534278,
            0.01138369,
            0.04226603,
            0.034922,
            0.01624717,
            0.02666741,
            0.03528285,
            0.02260047,
            0.06068637,
            0.03024274,
            0.03290764,
            0.01868606,
            0.03175778,
            0.0134957,
            0.01052821,
            0.01146578,
            0.00973862,
            0.00873214,
            0.00927582,
            0.00964842,
            0.01138369,
            0.04121092,
            0.01043446,
            0.01255592,
            0.01068276,
            0.01614444,
            0.02814916,
            0.00869615,
            0.00525667,
            0.01455463,
            0.01159558,
            0.01121415,
            0.01190426,
            0.01228928,
            0.02282403,
            0.02376981,
            0.0238058,
            0.02466363,
            0.02221335,
            0.02510493,
            0.04226603,
            0.01043446,
            0.06960235,
            0.03171178,
            0.01178013,
            0.03571782,
            0.03740958,
            0.02303407,
            0.03411119,
            0.02984797,
            0.02768301,
            0.01954747,
            0.05069718,
            0.01962676,
            0.01805755,
            0.01912161,
            0.01918338,
            0.02055424,
            0.01662241,
            0.02187409,
            0.034922,
            0.01255592,
            0.03171178,
            0.06131717,
            0.01200865,
            0.03230175,
            0.03672757,
            0.01654455,
            0.02623071,
            0.02521473,
            0.01938233,
            0.0151747,
            0.02726053,
            0.01761648,
            0.01015736,
            0.01053111,
            0.00982742,
            0.00720374,
            0.00939684,
            0.01329889,
            0.01624717,
            0.01068276,
            0.01178013,
            0.01200865,
            0.02654815,
            0.01231701,
            0.01484157,
            0.01223004,
            0.01576456,
            0.01015778,
            0.01074771,
            0.00939299,
            0.01295526,
            0.00909283,
            0.02578005,
            0.02301859,
            0.03475784,
            0.02795377,
            0.03003391,
            0.02689485,
            0.02666741,
            0.01614444,
            0.03571782,
            0.03230175,
            0.01231701,
            0.17808544,
            0.05800953,
            0.01907676,
            0.03289345,
            0.03466009,
            0.0234368,
            0.01721084,
            0.03070088,
            0.02724521,
            0.00903269,
            0.01800508,
            0.01470497,
            0.02531506,
            0.00490042,
            0.02902296,
            0.03528285,
            0.02814916,
            0.03740958,
            0.03672757,
            0.01484157,
            0.05800953,
            0.48987988,
            0.01973718,
            0.05585673,
            0.05893423,
            0.01502976,
            0.01407817,
            0.02526664,
            0.02386311,
            0.01343671,
            0.01484941,
            0.01322401,
            0.01419388,
            0.01290541,
            0.01750551,
            0.02260047,
            0.00869615,
            0.02303407,
            0.01654455,
            0.01223004,
            0.01907676,
            0.01973718,
            0.03619607,
            0.03894338,
            0.01191892,
            0.01623898,
            0.01291447,
            0.02211094,
            0.01012048,
            0.0061719,
            0.01364317,
            0.01093452,
            0.0242902,
            0.01952979,
            0.0253728,
            0.06068637,
            0.00525667,
            0.03411119,
            0.02623071,
            0.01576456,
            0.03289345,
            0.05585673,
            0.03894338,
            0.25041296,
            0.02885407,
            0.01689326,
            0.00948412,
            0.02932351,
            0.00885563,
            0.01262139,
            0.01873152,
            0.0142271,
            0.01963273,
            0.01439141,
            0.01202254,
            0.03024274,
            0.01455463,
            0.02984797,
            0.02521473,
            0.01015778,
            0.03466009,
            0.05893423,
            0.01191892,
            0.02885407,
            0.12737556,
            0.0188478,
            0.01242548,
            0.02332762,
            0.01924599,
            0.02482871,
            0.02333124,
            0.02562083,
            0.02543588,
            0.02633141,
            0.0163072,
            0.03290764,
            0.01159558,
            0.02768301,
            0.01938233,
            0.01074771,
            0.0234368,
            0.01502976,
            0.01623898,
            0.01689326,
            0.0188478,
            0.04093456,
            0.01544214,
            0.02479194,
            0.01949442,
            0.01485159,
            0.01284237,
            0.01367014,
            0.01316214,
            0.0117056,
            0.01415455,
            0.01868606,
            0.01121415,
            0.01954747,
            0.0151747,
            0.00939299,
            0.01721084,
            0.01407817,
            0.01291447,
            0.00948412,
            0.01242548,
            0.01544214,
            0.03075046,
            0.01823372,
            0.01123417,
            0.01988721,
            0.02159496,
            0.02049703,
            0.0212884,
            0.01896013,
            0.0230049,
            0.03175778,
            0.01190426,
            0.05069718,
            0.02726053,
            0.01295526,
            0.03070088,
            0.02526664,
            0.02211094,
            0.02932351,
            0.02332762,
            0.02479194,
            0.01823372,
            0.04659509,
            0.01786647,
            0.02093733,
            0.01805024,
            0.02218337,
            0.01742705,
            0.02516758,
            0.01547698,
            0.0134957,
            0.01228928,
            0.01962676,
            0.01761648,
            0.00909283,
            0.02724521,
            0.02386311,
            0.01012048,
            0.00885563,
            0.01924599,
            0.01949442,
            0.01123417,
            0.01786647,
            0.03978875,
        ],
        20,
        20,
    )
    @test isapprox(S, Stest, atol = 1e-7)

    # Now try with a nonconvex objective from  Kolm et al (2014)
    function deviation_risk_parity(w, cov_mtx)
        tmp = w .* (cov_mtx * w)
        diff = tmp .- tmp'
        return sum(diff .* diff)
    end
    drp = deviation_risk_parity(mu, S)
    drptest = 0.32258644752208027
    @test drp â‰ˆ drptest

    ef = EfficientFrontier(names(df)[2:end], mu, S)

    @generated function deviation_risk_parity(w::T...) where {T}
        quote
            cov_mtx = obj_params
            w = [i for i in w]
            deviation_risk_parity(w, cov_mtx)
        end
    end

    obj_params = ef.cov_mtx
    nonconvex_optimiser!(ef, deviation_risk_parity, obj_params)
    testweights = [
        0.051454512685994,
        0.052495693408016,
        0.04672186772311,
        0.042696174644532,
        0.044954259991844,
        0.05883506198745,
        0.029394830327411,
        0.074692721542761,
        0.038158465075084,
        0.048085082859006,
        0.076163515959687,
        0.034353673653056,
        0.027676787623678,
        0.064183101147794,
        0.036666040780056,
        0.043972747264416,
        0.05226758174384,
        0.07059143472995,
        0.045720677583482,
        0.060915769268832,
    ]
    @test isapprox(ef.weights, testweights, rtol = 1e-1)
    mu, sigma, sr = EfficientFrontierOptimiser.portfolio_performance(ef)
    mutest, sigmatest, srtest =
        0.09713251002640265, 0.14588119846495262, 0.5287350997800682
    @test isapprox(mu, mutest, rtol = 1e-2)
    @test isapprox(sigma, sigmatest, rtol = 1e-2)
    @test isapprox(sr, srtest, rtol = 1e-1)
end