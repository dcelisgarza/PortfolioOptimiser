using COSMO,
    CSV,
    Clarabel,
    HiGHS,
    LinearAlgebra,
    OrderedCollections,
    PortfolioOptimiser,
    Statistics,
    Test,
    TimeSeries,
    SCS

prices = TimeArray(CSV.File("./test/assets/stock_prices.csv"); timestamp = :date)

rf = 1.0329^(1 / 252) - 1
l = 2.0
PortfolioOptimiser.RiskMeasures[(end - 5):end]

portfolio = Portfolio(
    prices = prices[(end - 200):end],
    solvers = OrderedDict(
        :Clarabel => Dict(
            :solver => Clarabel.Optimizer,
            :params => Dict("verbose" => false, "max_step_fraction" => 0.75),
        ),
        :COSMO => Dict(:solver => COSMO.Optimizer, :params => Dict("verbose" => false)),
    ),
)
asset_statistics!(portfolio)

w1 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :None,
)
risk1 = calc_risk(portfolio; type = :Trad, rm = :RTG, rf = rf)
w2 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :Approx,
)
w3 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :Exact,
)
w4 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Utility,
    kelly = :None,
)
w5 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Utility,
    kelly = :Approx,
)
w6 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Utility,
    kelly = :Exact,
)
w7 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Sharpe,
    kelly = :None,
)
risk7 = calc_risk(portfolio; type = :Trad, rm = :RTG, rf = rf)
ret7 = dot(portfolio.mu, w7.weights)
w8 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Sharpe,
    kelly = :Approx,
)
risk8 = calc_risk(portfolio; type = :Trad, rm = :RTG, rf = rf)
ret8 = dot(portfolio.mu, w8.weights)
w9 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Sharpe,
    kelly = :Exact,
)
risk9 = calc_risk(portfolio; type = :Trad, rm = :RTG, rf = rf)
ret9 = dot(portfolio.mu, w9.weights)
w10 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :None,
)
w11 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :Approx,
)
w12 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :Exact,
)
setproperty!(portfolio, :mu_l, ret7)
w13 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :None,
)
setproperty!(portfolio, :mu_l, ret8)
w14 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :None,
)
setproperty!(portfolio, :mu_l, ret9)
w15 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Min_Risk,
    kelly = :None,
)
setproperty!(portfolio, :mu_l, Inf)
rmf = Symbol(lowercase(string(:RTG)) * "_u")
setproperty!(portfolio, rmf, risk7)
w16 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :None,
)
setproperty!(portfolio, rmf, risk8)
w17 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :None,
)
setproperty!(portfolio, rmf, risk9)
w18 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Max_Ret,
    kelly = :None,
)
setproperty!(portfolio, rmf, risk1)
w19 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Sharpe,
    kelly = :None,
)
setproperty!(portfolio, rmf, Inf)

w1t = [
    1.1206142630614112e-11,
    0.09772215128420475,
    3.5338858649323828e-12,
    3.307433371895369e-11,
    0.017417781863929577,
    0.041201102000678634,
    1.6220089767187403e-11,
    0.060553118743468366,
    1.7795758713115547e-11,
    1.5483766349422575e-11,
    0.22830001756787208,
    2.6382663454855723e-11,
    3.59484391773399e-11,
    0.13930594414393907,
    2.0476463882653826e-11,
    0.0362260148933746,
    9.71096463830921e-11,
    0.24663479935480356,
    1.4791298973742443e-12,
    0.13263906986901897,
]

w2t = [
    3.133895413047744e-11,
    0.09772167604116666,
    1.2455268180095731e-11,
    7.840719879567121e-11,
    0.017418117169965327,
    0.041201275182607314,
    4.3715932416052955e-11,
    0.060553238510597074,
    4.6981827189762015e-11,
    4.012322407176324e-11,
    0.22830027271191833,
    5.893318699116201e-11,
    9.091918390609722e-11,
    0.1393059827415553,
    5.385714087496309e-11,
    0.036226381315616035,
    2.2932266834945375e-10,
    0.24663403746828325,
    1.0356157915867175e-13,
    0.13263901817213244,
]

w3t = [
    1.4587347004162206e-11,
    0.09772230568561657,
    1.8550133212740332e-11,
    3.915311549856396e-11,
    0.01741768366195373,
    0.04120103554990599,
    1.178197456081433e-11,
    0.06055308145258582,
    1.0909759733378663e-11,
    1.2480862380469432e-11,
    0.22829993453436156,
    3.517050936225545e-11,
    1.099023841251717e-12,
    0.13930593379386513,
    9.51967882379049e-12,
    0.036225908143233815,
    7.234022717397937e-11,
    0.24663503026515377,
    2.1424797938930822e-11,
    0.1326390866663063,
]

w4t = [
    7.026805478010537e-12,
    0.07691042016208616,
    1.4421489729308237e-12,
    3.605941949944227e-12,
    0.018736328513127485,
    0.02727677352489846,
    7.406419741602451e-12,
    0.06300039975110802,
    9.651040072665584e-12,
    7.87028804146206e-12,
    0.23138910163058715,
    1.8363064032313167e-12,
    1.772932503046444e-11,
    0.12343688817492235,
    1.1346887350045238e-11,
    0.04767277729217605,
    9.551667214175191e-11,
    0.2743410772339696,
    6.373792606352843e-13,
    0.1372362335530555,
]

w5t = [
    3.4706517214133838e-12,
    0.0769105134835127,
    4.332238200934135e-13,
    2.0798243234787587e-12,
    0.01873630615765449,
    0.02727674226360157,
    3.662553846864922e-12,
    0.06300037490664813,
    4.921659104661623e-12,
    3.948558209931358e-12,
    0.23138904026457519,
    1.4125611823881814e-12,
    9.32600479211128e-12,
    0.12343690440083245,
    5.795540631821292e-12,
    0.04767271820335058,
    5.279314116397832e-11,
    0.27434116640204886,
    8.883155341591128e-15,
    0.13723623382992328,
]

w6t = [
    1.1582555456119735e-11,
    0.07691048840193924,
    1.8165976834316422e-11,
    2.4036634425084372e-11,
    0.018736314535723074,
    0.027276734997086285,
    1.1164739905107386e-11,
    0.06300037717964192,
    8.533819483771081e-12,
    1.0639516305899386e-11,
    0.23138904745439162,
    2.1844733214823184e-11,
    1.0274078493009247e-12,
    0.12343689433900468,
    6.561907834635063e-12,
    0.047672729286724246,
    1.3270678366594373e-10,
    0.2743411792778638,
    1.9047327419495057e-11,
    0.13723623426231363,
]

w7t = [
    4.865125156825178e-11,
    2.1052614079822636e-11,
    4.7365907624153683e-11,
    4.001712405491339e-11,
    0.1416419921188952,
    5.572004917204688e-11,
    5.631795517134003e-11,
    0.024937870196849492,
    1.79971814557232e-10,
    2.6621313364886448e-11,
    4.154443093866612e-11,
    5.2544888997749557e-11,
    5.7811722520210246e-11,
    4.517027037812361e-11,
    5.695329181673672e-11,
    0.21453454572858413,
    0.6188855836123038,
    3.483330484227522e-11,
    7.540474114074475e-9,
    3.8317437143151725e-11,
]

w8t = [
    2.7581567308792713e-11,
    9.305269420569393e-11,
    2.8856463333280447e-11,
    4.9209914529880345e-11,
    0.11879417202822751,
    6.49213529026326e-12,
    1.0558365268373762e-11,
    0.11578411598281094,
    8.11697335377414e-10,
    7.623263804780261e-11,
    5.5430873896552634e-11,
    2.083692541531304e-11,
    8.228898768789633e-12,
    4.304777213202721e-11,
    9.268065127424773e-12,
    0.18392223680167313,
    0.5660084495482668,
    7.095328732116712e-11,
    0.01549102426416752,
    6.340719531059086e-11,
]

w9t = [
    4.452192067125962e-7,
    1.287606811636711e-6,
    4.7070532250350305e-7,
    7.836131334480091e-7,
    0.13083957327844015,
    1.3272190447713796e-7,
    1.95023880053568e-7,
    0.046757382144710716,
    1.2607203758700611e-5,
    1.1565419811781638e-6,
    7.726780248137755e-7,
    3.3853707145607237e-7,
    1.5622419866868718e-7,
    6.248082052347081e-7,
    1.7863550934265617e-7,
    0.1988979404666623,
    0.6074976195595244,
    9.865617645770584e-7,
    0.01598646464700567,
    8.838228839058677e-7,
]

w10t = [
    8.742294125473961e-10,
    1.4707486744372402e-9,
    9.371030740356124e-10,
    2.189422648260022e-9,
    0.9999999340817113,
    3.1597937318578487e-10,
    4.6333260236071825e-10,
    1.336207603310839e-9,
    5.696795440054946e-9,
    1.3768680167520074e-9,
    7.171481417281956e-10,
    5.752604171160508e-10,
    3.667148376429282e-10,
    7.02423046380329e-10,
    4.511960450499541e-10,
    7.007335179502708e-9,
    3.628430937215484e-8,
    9.033006700630679e-10,
    3.486313790911996e-9,
    7.636002597011294e-10,
]

w11t = [
    6.034984815892211e-12,
    1.7868956473930124e-11,
    7.467599094385243e-12,
    2.596243132845663e-11,
    0.8577737320666471,
    5.080228610064883e-12,
    1.8850929459354704e-12,
    1.795690659535625e-11,
    9.157707978562806e-11,
    1.825453605253934e-11,
    3.8824404267478314e-12,
    2.7453150914440054e-13,
    4.014309200232137e-12,
    3.3700780411065767e-12,
    2.0623302151245345e-12,
    1.862276586845158e-10,
    0.1422262674719025,
    8.121980053374418e-12,
    5.6764282879759227e-11,
    4.6446850307836085e-12,
]

w12t = [
    5.2646377055566815e-9,
    9.387752688951843e-9,
    5.503480930338795e-9,
    1.235216674736526e-8,
    0.8926328836450478,
    1.7312474138778515e-9,
    2.354226867903479e-9,
    9.106311409818638e-9,
    4.0935783548154107e-8,
    8.886647767038408e-9,
    4.408090320821839e-9,
    3.198559055116633e-9,
    1.8302608070763718e-9,
    4.2122112930226e-9,
    2.2615788647672336e-9,
    7.316435095402851e-8,
    0.1073668966411457,
    5.7628136176508805e-9,
    2.4776389791662633e-8,
    4.577296653036629e-9,
]

w13t = [
    2.595599936537348e-11,
    1.651019365128729e-11,
    2.5534866643685744e-11,
    2.2331322397629907e-11,
    0.1416419980914485,
    2.8547848491104438e-11,
    2.7956901030692e-11,
    0.024937875012701664,
    5.018205148061643e-11,
    1.8276516401964547e-11,
    2.2228415745472723e-11,
    2.6483256941600314e-11,
    2.852286792224843e-11,
    2.2890050038139587e-11,
    2.8047760729549417e-11,
    0.21453455083719497,
    0.6188855733657549,
    2.058371397242547e-11,
    2.3093663502351488e-9,
    1.9481925188446284e-11,
]

w14t = [
    9.511453385748187e-12,
    5.158782452595663e-12,
    9.355679577321975e-12,
    8.22983530798536e-12,
    0.12110207620316887,
    1.0596327432720495e-11,
    1.0374452970729877e-11,
    0.12035458528085836,
    1.3443395894894593e-11,
    6.173547869257024e-12,
    7.423348583160891e-12,
    9.811854273805244e-12,
    1.055058152032995e-11,
    8.121094107257048e-12,
    1.0423920490319705e-11,
    0.19438514114756852,
    0.5641581939077709,
    6.83787341129961e-12,
    3.3283477786307378e-9,
    6.273481559993505e-12,
]

w15t = [
    7.955590598945476e-12,
    4.741151065966018e-12,
    7.806242374200578e-12,
    6.7811623433498785e-12,
    0.12905162388524555,
    8.814266159476679e-12,
    8.60688199371375e-12,
    0.05087945538764261,
    1.2940951279389932e-11,
    5.360477650229075e-12,
    6.6585498610750066e-12,
    8.127137297753299e-12,
    8.80723832819855e-12,
    6.888195928846777e-12,
    8.630917689837923e-12,
    0.20914744600224697,
    0.6109214742545982,
    6.143790071406996e-12,
    3.563450885739955e-10,
    5.658901090638695e-12,
]

w16t = [
    2.8587696467818527e-13,
    1.2467345240121674e-11,
    2.2151480175468828e-13,
    2.9286845680027484e-13,
    0.1416419802719567,
    9.221202005185037e-13,
    8.149711440468206e-13,
    0.024937901687576456,
    1.078452322684367e-11,
    1.1220924972901308e-12,
    3.174456033772842e-10,
    4.819035187133998e-13,
    9.187561246840649e-13,
    1.0508896919184018e-10,
    8.691685150417825e-13,
    0.21453454552082565,
    0.6188855710931238,
    4.7710933265881826e-11,
    3.349885945516861e-10,
    5.921021367708042e-10,
]

w17t = [
    5.022809091179894e-12,
    3.278883980116286e-10,
    4.242900142157342e-12,
    5.228105269875839e-12,
    0.12109989810844203,
    1.850103245573456e-11,
    1.652832955852485e-11,
    0.12029753058162629,
    1.549175844600153e-10,
    2.6176720920853117e-11,
    1.5556586266721366e-8,
    8.796490585995089e-12,
    1.8675975278631834e-11,
    2.869279167039059e-9,
    1.791874739805025e-11,
    0.19439728866440398,
    0.564205084513498,
    1.5677625914936408e-9,
    1.1071292377501081e-7,
    6.682158054054204e-8,
]

w18t = [
    8.992162154254699e-13,
    7.263481368968066e-11,
    6.839052956845666e-13,
    9.941690919243274e-13,
    0.12913503414082383,
    3.0409506206984005e-12,
    2.7098510229949162e-12,
    0.05030090545900891,
    3.1945339872689706e-11,
    3.907803554444016e-12,
    2.498095575579715e-9,
    1.5461452921547135e-12,
    3.0823931861879485e-12,
    5.3187482531673e-10,
    2.9037874349796552e-12,
    0.20927015347378355,
    0.6112938998801234,
    3.2771749676076714e-10,
    8.397114124343423e-10,
    2.7245127873750213e-9,
]

w19t = [
    1.349735065468948e-10,
    0.09766834612143344,
    8.255178832253601e-11,
    1.7624896122680538e-11,
    0.017466195123683765,
    0.041194656278016314,
    1.5181689396767334e-10,
    0.060564045880682656,
    1.7672406247051208e-10,
    1.5929697935895283e-10,
    0.22831789328907265,
    9.215376723987625e-11,
    3.028225240948744e-10,
    0.1393079661617446,
    1.9962145792093938e-10,
    0.036274396509238534,
    1.9707575661813782e-8,
    0.24657062542506455,
    4.2844788845583406e-11,
    0.132635854143057,
]

@test isapprox(w1.weights, w1t)
@test isapprox(w2.weights, w2t)
@test isapprox(w3.weights, w3t)
@test isapprox(w2.weights, w3.weights, rtol = 1e-6)
@test isapprox(w4.weights, w4t)
@test isapprox(w5.weights, w5t)
@test isapprox(w6.weights, w6t)
@test isapprox(w5.weights, w6.weights, rtol = 1e-3)
@test isapprox(w7.weights, w7t)
@test isapprox(w8.weights, w8t)
@test isapprox(w9.weights, w9t)
@test isapprox(w8.weights, w9.weights, rtol = 1e-1)
@test isapprox(w10.weights, w10t)
@test isapprox(w11.weights, w11t)
@test isapprox(w12.weights, w12t)
@test isapprox(w11.weights, w12.weights, rtol = 1e-1)
@test isapprox(w13.weights, w7.weights, rtol = 1e-8)
@test isapprox(w14.weights, w8.weights, rtol = 1e-6)
@test isapprox(w15.weights, w9.weights, rtol = 1e-3)
@test isapprox(w16.weights, w7.weights, rtol = 1e-8)
@test isapprox(w17.weights, w8.weights, rtol = 1e-6)
@test isapprox(w18.weights, w9.weights, rtol = 1e-3)
@test isapprox(w13.weights, w16.weights, rtol = 1e-9)
@test isapprox(w14.weights, w17.weights, rtol = 1e-6)
@test isapprox(w15.weights, w18.weights, rtol = 1e-3)
@test isapprox(w19.weights, w1.weights, rtol = 1e-4)

########################################
println("w1t = ", w1.weights, "\n")
println("w2t = ", w2.weights, "\n")
println("w3t = ", w3.weights, "\n")
println("w4t = ", w4.weights, "\n")
println("w5t = ", w5.weights, "\n")
println("w6t = ", w6.weights, "\n")
println("w7t = ", w7.weights, "\n")
println("w8t = ", w8.weights, "\n")
println("w9t = ", w9.weights, "\n")
println("w10t = ", w10.weights, "\n")
println("w11t = ", w11.weights, "\n")
println("w12t = ", w12.weights, "\n")
println("w13t = ", w13.weights, "\n")
println("w14t = ", w14.weights, "\n")
println("w15t = ", w15.weights, "\n")
println("w16t = ", w16.weights, "\n")
println("w17t = ", w17.weights, "\n")
println("w18t = ", w18.weights, "\n")
println("w19t = ", w19.weights, "\n")
#######################################

for rtol in [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1e0]
    a1, a2 = w19.weights, w1.weights
    if isapprox(a1, a2, rtol = rtol)
        println(", rtol = $(rtol)")
        break
    end
end

isapprox(1.0359036144810312, 1; atol = 0.04)
