using COSMO,
    CSV,
    Clarabel,
    HiGHS,
    LinearAlgebra,
    OrderedCollections,
    PortfolioOptimiser,
    Statistics,
    Test,
    TimeSeries,
    SCS

prices = TimeArray(CSV.File("./test/assets/stock_prices.csv"); timestamp = :date)

rf = 1.0329^(1 / 252) - 1
l = 2.0
PortfolioOptimiser.RiskMeasures[(end - 5):end]

portfolio = HCPortfolio(
    prices = prices[(end - 200):end],
    solvers = OrderedDict(
        :Clarabel => Dict(
            :solver => Clarabel.Optimizer,
            :params => Dict("verbose" => false, "max_step_fraction" => 0.75),
        ),
        :COSMO => Dict(:solver => COSMO.Optimizer, :params => Dict("verbose" => false)),
    ),
)
asset_statistics!(portfolio)

w1 = opt_port!(portfolio; type = :HRP, rm = :RTG, rf = rf, l = l, linkage = :ward)
w2 = opt_port!(portfolio; type = :HERC, rm = :RTG, rf = rf, l = l, cluster = false)
w3 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Min_Risk,
    rf = rf,
    l = l,
    cluster = false,
)
w4 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Utility,
    rf = rf,
    l = l,
    cluster = false,
)
w5 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Sharpe,
    rf = rf,
    l = l,
    cluster = false,
)
w6 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Max_Ret,
    rf = rf,
    l = l,
    cluster = false,
)
w7 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Equal,
    rf = rf,
    l = l,
    cluster = false,
)
w8 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Min_Risk,
    obj_o = :Sharpe,
    rf = rf,
    l = l,
    cluster = false,
)
w9 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Sharpe,
    obj_o = :Min_Risk,
    rf = rf,
    l = l,
    cluster = false,
)
w10 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Equal,
    obj_o = :Sharpe,
    rf = rf,
    l = l,
    cluster = false,
)
w11 = opt_port!(
    portfolio;
    type = :NCO,
    rm = :RTG,
    obj = :Sharpe,
    obj_o = :Equal,
    rf = rf,
    l = l,
    cluster = false,
)

w1t = [
    0.03421556945613498,
    0.06755134870542995,
    0.029347182427415453,
    0.05308166337900148,
    0.05313714050710668,
    0.03148965688772591,
    0.03378837018951474,
    0.03435940763610544,
    0.060409955275512545,
    0.054204902412732556,
    0.08235679662722742,
    0.03237339664619154,
    0.013725384532239043,
    0.06274773166446919,
    0.0200112738782573,
    0.05940396376906876,
    0.07564073954231806,
    0.06023163289037765,
    0.06424017547355798,
    0.0776837080996133,
]

w2t = [
    0.12272565701099011,
    0.1319605922941986,
    0.10526354820554232,
    0.09820386818485113,
    0.09724954191092244,
    0.017141155457941353,
    0.06251026137935015,
    0.04133365378803519,
    0.007261631092835881,
    0.007225199742890979,
    0.007330876905674741,
    0.018794657524481898,
    0.016511352534700638,
    0.009547210056392851,
    0.010892984883311026,
    0.0344874888118273,
    0.13843475956915705,
    0.009164379906494588,
    0.008562843555748122,
    0.055398337184653604,
]

w3t = [
    1.1122131485189023e-11,
    0.023947904594817403,
    0.008654932589380422,
    3.118876209002888e-13,
    3.007706321066676e-13,
    0.010389329718699282,
    0.002635171680620229,
    0.05307058024351695,
    2.9552671999819593e-12,
    0.021417541684948155,
    0.14074005221548436,
    0.019760652884107485,
    1.6499421726538924e-11,
    0.22899500156004937,
    0.0030216579958167004,
    0.050934079070838405,
    0.024923888440213194,
    0.20430811856264766,
    0.04391715330559611,
    0.16328393542207487,
]

w4t = [
    7.593732814700385e-12,
    0.02527222091778704,
    0.008704119686236281,
    3.0336952801547483e-13,
    2.1131574155202048e-13,
    2.2157335406610334e-10,
    0.0022467385902653686,
    0.05747591424459326,
    3.609806215802843e-11,
    0.043290230492795435,
    0.13185162914174783,
    0.021400932375252642,
    4.929750500834112e-11,
    0.212632122126413,
    6.444293489853166e-11,
    0.055162067466843115,
    0.027826701939502138,
    0.17029092519455724,
    0.06700847324484002,
    0.17683792419964636,
]

w5t = [
    1.2331989214426656e-11,
    6.231132981694356e-12,
    1.2306804018264976e-11,
    1.3358708622483684e-11,
    0.09588042510431309,
    0.0,
    1.696351580189378e-11,
    0.11958236180271992,
    5.258941534075055e-9,
    1.4425702613451978e-12,
    1.0444838792801463e-12,
    7.87656533628801e-12,
    4.2015760413110865e-12,
    1.3780269673112635e-12,
    0.0,
    0.18076726323151485,
    0.5888890273669505,
    1.5835940610742327e-12,
    0.014880917126768811,
    5.177306070082038e-12,
]

w6t = [
    6.811514915839932e-10,
    1.1651950108186476e-9,
    7.352030489841562e-10,
    1.6535281899643483e-9,
    0.9999999502766338,
    3.2735065181216375e-18,
    3.3016467054880843e-10,
    1.4904946458659182e-16,
    1.2296949812172037e-8,
    2.2667015594749685e-17,
    8.17348653114203e-18,
    2.637727120960746e-17,
    1.3785904919446847e-17,
    7.934534285583589e-18,
    1.0774940342968887e-9,
    1.4875903084372164e-8,
    1.6907776417216398e-8,
    1.1548118336675135e-17,
    2.336695627303026e-16,
    4.276424504389479e-17,
]

w7t = [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
]

w8t = [
    1.8487002538756168e-10,
    0.3980576687407824,
    0.14386069879295268,
    5.184138712142072e-12,
    4.999354167628564e-12,
    7.790755991487845e-12,
    0.043801339351686855,
    1.0206158655128095e-11,
    6.182933620311741e-23,
    4.4809226911564045e-13,
    2.9445269807510484e-12,
    3.800229007082556e-12,
    3.173052095647566e-21,
    4.790974210513392e-12,
    2.265882474859349e-12,
    9.795281859827027e-12,
    0.4142802928408879,
    4.2744816278248645e-12,
    9.188233256309708e-13,
    3.1401611648196825e-11,
]

w9t = [
    1.7149792859546157e-21,
    8.66548275855857e-22,
    1.71147684291976e-21,
    1.857762618528853e-21,
    1.3333853940616244e-11,
    0.0,
    2.359074250825494e-21,
    2.9975251915976844e-11,
    1.8532720963928818e-17,
    5.083675479399401e-21,
    3.6808030970866095e-21,
    1.974388418397284e-21,
    1.0531929490588798e-21,
    4.856222321635003e-21,
    0.0,
    4.53122364522751e-11,
    8.189534276261004e-11,
    5.5806490077637644e-21,
    5.24409490029177e-11,
    1.2977754524772674e-21,
]

w10t = [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
]

w11t = [
    8.763691138750252e-15,
    4.428135959782229e-15,
    8.745793354654594e-15,
    9.493326205884927e-15,
    6.813713645510531e-5,
    0.0,
    1.2055071613360806e-14,
    0.0001949998668016614,
    1.6502895120408468e-10,
    4.5268778084993766e-14,
    3.2776572629741715e-14,
    1.2844111525114656e-14,
    6.851401461399121e-15,
    4.324336820875516e-14,
    0.0,
    0.00029477250424606103,
    0.0004184922206066768,
    4.969419517953668e-14,
    0.0004669727036274196,
    8.442499201704742e-15,
]

@test isapprox(w1.weights, w1t)
@test isapprox(w2.weights, w2t)
@test isapprox(w3.weights, w3t)
@test isapprox(w4.weights, w4t)
@test isapprox(w5.weights, w5t)
@test isapprox(w6.weights, w6t)
@test isapprox(w7.weights, w7t)
@test isapprox(w8.weights, w8t)
@test isapprox(w9.weights, w9t)
@test isapprox(w10.weights, w10t)
@test isapprox(w11.weights, w11t)

########################################
println("w1t = ", w1.weights, "\n")
println("w2t = ", w2.weights, "\n")
println("w3t = ", w3.weights, "\n")
println("w4t = ", w4.weights, "\n")
println("w5t = ", w5.weights, "\n")
println("w6t = ", w6.weights, "\n")
println("w7t = ", w7.weights, "\n")
println("w8t = ", w8.weights, "\n")
println("w9t = ", w9.weights, "\n")
println("w10t = ", w10.weights, "\n")
println("w11t = ", w11.weights, "\n")
# println("w12t = ", w12.weights, "\n")
# println("w13t = ", w13.weights, "\n")
# println("w14t = ", w14.weights, "\n")
# println("w15t = ", w15.weights, "\n")
# println("w16t = ", w16.weights, "\n")
# println("w17t = ", w17.weights, "\n")
# println("w18t = ", w18.weights, "\n")
# println("w19t = ", w19.weights, "\n")
#######################################

for rtol in [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 2.5e-1, 5e-1, 1e0]
    a1, a2 = [
        7.142507835689946e-16,
        1.3658938730114826e-16,
        3.660245424824713e-16,
        2.193390803434477e-15,
        3.284406887019229e-5,
        0.0,
        2.8833750726035664e-15,
        0.00013150046307600161,
        3.193448989948215e-11,
        3.958932996584078e-14,
        9.519307751356533e-15,
        1.1653842795246459e-15,
        6.332667663280077e-17,
        8.663055083008026e-15,
        0.0,
        0.0001434553602614673,
        0.000248114859820377,
        2.5929903745042446e-15,
        0.0002587616268781684,
        2.940443665661615e-15,
    ],
    [
        1.0164440246632186e-15,
        1.947149103649204e-16,
        5.210887173779382e-16,
        3.1205355142010583e-15,
        4.688388388960399e-5,
        0.0,
        4.101214763069201e-15,
        0.00018084128302159894,
        4.4529086809731815e-11,
        5.520599752652079e-14,
        1.327671290761093e-14,
        1.6026480043407179e-15,
        8.710431171009255e-17,
        1.2082764384039807e-14,
        0.0,
        0.0001972818254717155,
        0.00035417622374826036,
        3.612531699923921e-15,
        0.0003606161665688415,
        4.043783521933823e-15,
    ]
    if isapprox(a1, a2, rtol = rtol)
        println(", rtol = $(rtol)")
        break
    end
end
portfolio = Portfolio(
    prices = prices[(end - 200):end],
    solvers = OrderedDict(
        :Clarabel => Dict(
            :solver => Clarabel.Optimizer,
            :params => Dict("verbose" => false, "max_step_fraction" => 0.75),
        ),
        :COSMO => Dict(:solver => COSMO.Optimizer, :params => Dict("verbose" => false)),
    ),
)
asset_statistics!(portfolio)
w6 = opt_port!(
    portfolio;
    rf = rf,
    l = l,
    class = :Classic,
    type = :Trad,
    rm = :RTG,
    obj = :Utility,
    kelly = :Exact,
)

isapprox(1.0359036144810312, 1; atol = 0.04)
