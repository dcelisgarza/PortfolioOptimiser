using COSMO,
    CovarianceEstimation,
    CSV,
    Clarabel,
    HiGHS,
    LinearAlgebra,
    OrderedCollections,
    PortfolioOptimiser,
    Statistics,
    StatsBase,
    Test,
    TimeSeries,
    SCS

prices = TimeArray(CSV.File("./test/assets/stock_prices.csv"); timestamp = :date)

rf = 1.0329^(1 / 252) - 1
l = 2.0

cols = [:RRC, :AMZN, :JPM, :MA, :WMT]
PortfolioOptimiser.MuTypes

portfolio = Portfolio(; prices = prices)

asset_statistics!(portfolio; mu_type = :Default)
cov4 = portfolio.cov

covt4 = reshape(
    [
        0.00011453701168010575,
        8.50546076381776e-7,
        1.0268898414746188e-5,
        8.387831581712493e-6,
        2.052479785323976e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        8.50546076381776e-7,
        0.00012418097377924818,
        2.9874463724167653e-6,
        7.465395676317613e-6,
        9.104909012973227e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0268898414746188e-5,
        2.9874463724167653e-6,
        0.0001500580521445461,
        1.656099559355727e-5,
        2.5348852427083498e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        8.387831581712493e-6,
        7.465395676317613e-6,
        1.656099559355727e-5,
        0.0002945546898009439,
        3.10988972834547e-5,
        0.0,
        6.964019208823618e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        7.049763064875457e-6,
        0.0,
        0.0,
        2.5438903901474875e-7,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.052479785323976e-5,
        9.104909012973227e-6,
        2.5348852427083498e-5,
        3.10988972834547e-5,
        0.00022176311747421483,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.7658397097738976e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.00010964205662589042,
        0.0,
        3.5043274068413944e-6,
        0.0,
        1.2769274586979229e-8,
        7.384680037262682e-6,
        0.0,
        3.477131364051015e-6,
        4.544136164974472e-6,
        2.0126541497973855e-5,
        0.0,
        0.0,
        2.540998387700437e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        6.964019208823618e-5,
        0.0,
        0.0,
        0.001455084144496997,
        0.0,
        2.461090245728668e-5,
        1.0035401671194174e-5,
        0.0,
        5.018476937477317e-6,
        1.2818045736205528e-6,
        2.0055857925440417e-5,
        0.00021094440647997893,
        1.7058321106730766e-5,
        0.0,
        0.0,
        3.187162169305944e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        3.5043274068413944e-6,
        0.0,
        0.00013412599416779618,
        0.0,
        2.894327010627024e-6,
        1.1634437742975002e-5,
        1.599955743067789e-5,
        5.2739413125297614e-5,
        0.0,
        0.0,
        1.6115896707252635e-5,
        0.0,
        8.258604269891014e-6,
        0.0,
        7.565387004554022e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.461090245728668e-5,
        0.0,
        0.00012390354031743562,
        0.0,
        0.0,
        0.0,
        3.871421027553547e-6,
        0.0,
        4.047305806904461e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.2769274586979229e-8,
        1.0035401671194174e-5,
        2.894327010627024e-6,
        0.0,
        0.00014722088481681196,
        1.39150255820518e-6,
        9.095034591672207e-6,
        5.22748279531884e-5,
        0.0,
        2.623928921701497e-5,
        1.777847710009111e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        7.384680037262682e-6,
        0.0,
        1.1634437742975002e-5,
        0.0,
        1.39150255820518e-6,
        7.750817436542408e-5,
        0.0,
        0.0,
        5.291041756811412e-6,
        0.0,
        0.0,
        0.0,
        7.813508070992848e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        7.049763064875457e-6,
        0.0,
        0.0,
        5.018476937477317e-6,
        1.599955743067789e-5,
        0.0,
        9.095034591672207e-6,
        0.0,
        0.0005395245925333643,
        0.00015413343700658956,
        0.0,
        0.0,
        6.864267324533987e-5,
        0.0,
        0.0,
        0.0,
        7.921076317935638e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        3.477131364051015e-6,
        1.2818045736205528e-6,
        5.2739413125297614e-5,
        3.871421027553547e-6,
        5.22748279531884e-5,
        0.0,
        0.00015413343700658956,
        0.0018019555697038469,
        0.0,
        9.298331332753777e-5,
        0.00022452472506998854,
        0.0,
        0.0,
        0.0,
        4.496169203309591e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        4.544136164974472e-6,
        2.0055857925440417e-5,
        0.0,
        0.0,
        0.0,
        5.291041756811412e-6,
        0.0,
        0.0,
        8.796272601186529e-5,
        4.0819889024777525e-5,
        0.0,
        0.0,
        3.9441897936475754e-7,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.5438903901474875e-7,
        0.0,
        2.0126541497973855e-5,
        0.00021094440647997893,
        0.0,
        4.047305806904461e-5,
        2.623928921701497e-5,
        0.0,
        0.0,
        9.298331332753777e-5,
        4.0819889024777525e-5,
        0.0008856995385411339,
        3.442058281904238e-5,
        0.0,
        0.0,
        2.1352528811223636e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.7058321106730766e-5,
        1.6115896707252635e-5,
        0.0,
        1.777847710009111e-5,
        0.0,
        6.864267324533987e-5,
        0.00022452472506998854,
        0.0,
        3.442058281904238e-5,
        0.0004221343947447272,
        0.0,
        0.0,
        0.0,
        2.1975509327127823e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        7.013213772880071e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.540998387700437e-6,
        0.0,
        8.258604269891014e-6,
        0.0,
        0.0,
        7.813508070992848e-6,
        0.0,
        0.0,
        3.9441897936475754e-7,
        0.0,
        0.0,
        0.0,
        7.759486513931616e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        3.187162169305944e-6,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        2.1352528811223636e-5,
        0.0,
        0.0,
        0.0,
        6.830267879306106e-5,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.7658397097738976e-6,
        0.0,
        0.0,
        7.565387004554022e-6,
        0.0,
        0.0,
        0.0,
        7.921076317935638e-6,
        4.496169203309591e-6,
        0.0,
        0.0,
        2.1975509327127823e-6,
        0.0,
        0.0,
        0.0,
        9.298397308907835e-5,
    ],
    20,
    20,
)

println("covt = reshape(", vec(portfolio.cov), ", 20, 20)")

# println("kurtt = reshape(", vec(portfolio.kurt), ", 5^2, 5^2)")
# println("skurtt = reshape(", vec(portfolio.skurt), ", 5^2, 5^2)")

asset_statistics!(
    portfolio::AbstractPortfolio;
    # # flags
    # calc_codep::Bool = true,
    # calc_cov::Bool = true,
    # calc_mu::Bool = true,
    # calc_kurt::Bool = true,
    # # cov_mtx
    # alpha::Real = 0.0,
    # cov_args::Tuple = (),
    # cov_est::CovarianceEstimator = StatsBase.SimpleCovariance(; corrected = true),
    # cov_func::Function = cov,
    # cov_kwargs::NamedTuple = (;),
    # cov_type::Symbol = portfolio.cov_type,
    # cov_weights::Union{AbstractWeights, Nothing} = nothing,
    # custom_cov::Union{AbstractMatrix, Nothing} = nothing,
    # denoise::Bool = false,
    # detone::Bool = false,
    # gs_threshold::Real = portfolio.gs_threshold,
    # jlogo::Bool = portfolio.jlogo,
    # kernel = ASH.Kernels.gaussian,
    # m::Integer = 10,
    # method::Symbol = :Fixed,
    # mkt_comp::Integer = 0,
    # n::Integer = 1000,
    # opt_args = (),
    # opt_kwargs = (;),
    # posdef_args::Tuple = (),
    # posdef_fix::Symbol = portfolio.posdef_fix,
    # posdef_func::Function = x -> x,
    # posdef_kwargs::NamedTuple = (;),
    # std_args::Tuple = (),
    # std_func::Function = std,
    # std_kwargs::NamedTuple = (;),
    # target_ret::Union{Real, AbstractVector{<:Real}} = 0.0,
    # # mean_vec
    # custom_mu::Union{AbstractVector, Nothing} = nothing,
    # mean_args::Tuple = (),
    # mean_func::Function = mean,
    # mean_kwargs::NamedTuple = (;),
    # mkt_ret::Union{AbstractVector, Nothing} = nothing,
    # mu_target::Symbol = :GM,
    # mu_type::Symbol = portfolio.mu_type,
    # mu_weights::Union{AbstractWeights, Nothing} = nothing,
    # rf::Real = 0.0,
    # # codep_dist_mtx
    # alpha_tail::Union{Real, Nothing} = isa(portfolio, HCPortfolio) ? portfolio.alpha_tail :
    #                                    nothing,
    # bins_info::Union{Symbol, Integer, Nothing} = isa(portfolio, HCPortfolio) ?
    #                                              portfolio.bins_info : nothing,
    # codep_type::Union{Symbol, Nothing} = isa(portfolio, HCPortfolio) ?
    #                                      portfolio.codep_type : nothing,
    # cor_args::Tuple = (),
    # cor_func::Function = cor,
    # cor_kwargs::NamedTuple = (;),
    # custom_cor::Union{AbstractMatrix, Nothing} = nothing,
    # dist_args::Tuple = (),
    # dist_func::Function = x -> sqrt.(clamp!((1 .- x) / 2, 0, 1)),
    # dist_kwargs::NamedTuple = (;),
    # custom_kurt::Union{AbstractMatrix, Nothing} = nothing,
    # custom_skurt::Union{AbstractMatrix, Nothing} = nothing,
    # uplo::Symbol = :L,
)

########################################
println("w1t = ", w1.weights, "\n")
println("w2t = ", w2.weights, "\n")
println("w3t = ", w3.weights, "\n")
println("w4t = ", w4.weights, "\n")
println("w5t = ", w5.weights, "\n")
println("w6t = ", w6.weights, "\n")
println("w7t = ", w7.weights, "\n")
println("w8t = ", w8.weights, "\n")
println("w9t = ", w9.weights, "\n")
println("w10t = ", w10.weights, "\n")
println("w11t = ", w11.weights, "\n")
println("w12t = ", w12.weights, "\n")
println("w13t = ", w13.weights, "\n")
println("w14t = ", w14.weights, "\n")
println("w15t = ", w15.weights, "\n")
println("w16t = ", w16.weights, "\n")
println("w17t = ", w17.weights, "\n")
println("w18t = ", w18.weights, "\n")
println("w19t = ", w19.weights, "\n")
#######################################

for rtol in [1e-10, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 2.5e-1, 5e-1, 1e0]
    a1, a2 = [
        0.004127710286387879,
        0.010592152386952021,
        0.012536905345418492,
        0.023303462236461917,
        0.01936823663730284,
        0.03214466953862615,
        0.018650835191729918,
        0.08347430641751365,
        0.026201862079995652,
        0.04168068597107915,
        0.1352680942007192,
        0.03614055044122551,
        0.030447496750462644,
        0.07180951106902754,
        0.03968594759203002,
        0.05644735602737195,
        0.07166639041345427,
        0.11896200641502389,
        0.06340744330857792,
        0.10408437769063927,
    ],
    [
        0.004127705244176058,
        0.010592144373129499,
        0.012536891784237078,
        0.02330345222822044,
        0.01936822351841273,
        0.03214462073915424,
        0.01865081904161745,
        0.08347415403836461,
        0.02620187861704772,
        0.04168059442187793,
        0.1352683515063191,
        0.036140539854211735,
        0.030447429468590907,
        0.07180915217718357,
        0.039685906039658984,
        0.05644733649337989,
        0.07166656725011773,
        0.11896275408544081,
        0.06340706674511927,
        0.10408441237374016,
    ]
    if isapprox(a1, a2, rtol = rtol)
        println(", rtol = $(rtol)")
        break
    end
end

portfolio = Portfolio(
    prices = prices,
    solvers = OrderedDict(
        :Clarabel => Dict(
            :solver => Clarabel.Optimizer,
            :params => Dict("verbose" => false, "max_step_fraction" => 0.75),
        ),
        :COSMO => Dict(:solver => COSMO.Optimizer, :params => Dict("verbose" => false)),
    ),
)
asset_statistics!(portfolio)

w1 = opt_port!(portfolio; class = :Classic, type = :RP, rm = :Kurt)
rc1 = risk_contribution(portfolio, type = :RP, rm = :Kurt)
lrc1, hrc1 = extrema(rc1)

portfolio.risk_budget = 1:size(portfolio.returns, 2)
w2 = opt_port!(portfolio; class = :Classic, type = :RP, rm = :Kurt)
rc2 = risk_contribution(portfolio, type = :RP, rm = :Kurt)
lrc2, hrc2 = extrema(rc2)

w1t = [
    0.03879158773899491,
    0.04946318916187915,
    0.03767536457743636,
    0.04975768359685481,
    0.03583384747996175,
    0.05474667190193154,
    0.02469826359420486,
    0.10506491736193022,
    0.031245766025529604,
    0.04312788495096333,
    0.12822307815405873,
    0.03170133005454372,
    0.026067725442004967,
    0.057123092045424234,
    0.03137705105386256,
    0.04155724092469867,
    0.044681796838160794,
    0.0754338209703899,
    0.03624092724713855,
    0.057188760880031476,
]

w2t = [
    0.004127710286387879,
    0.010592152386952021,
    0.012536905345418492,
    0.023303462236461917,
    0.01936823663730284,
    0.03214466953862615,
    0.018650835191729918,
    0.08347430641751365,
    0.026201862079995652,
    0.04168068597107915,
    0.1352680942007192,
    0.03614055044122551,
    0.030447496750462644,
    0.07180951106902754,
    0.03968594759203002,
    0.05644735602737195,
    0.07166639041345427,
    0.11896200641502389,
    0.06340744330857792,
    0.10408437769063927,
]

@test isapprox(w1.weights, w1t, rtol = 1.0e-5)
@test isapprox(w2.weights, w2t, rtol = 1.0e-5)
@test isapprox(hrc1 / lrc1, 1, atol = 1.6)
@test isapprox(hrc2 / lrc2, 20, atol = 3.2e0)
