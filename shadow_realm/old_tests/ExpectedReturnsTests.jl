using Test
using PortfolioOptimiser, CSV, DataFrames, Statistics, CovarianceEstimation

@testset "Expected returns" begin
    df = CSV.read("./assets/stock_prices.csv", DataFrame)
    dropmissing!(df)
    returns = returns_from_prices(df[!, 2:end])

    # Mean returns.
    mu = ret_model(MRet(), Matrix(returns))
    mutest = [0.0006064821858973168, 0.000669021311430873, 0.000847687933612784,
              0.0006982516372635583, 0.0016329295372448094, -0.0006601113973836448,
              0.0010584278216174692, 0.00022870029930466274, 0.000690300731558402,
              0.0003212035985447059, 0.00021047516560557256, -0.0007980845181260188,
              -0.002294228795169384, -0.0001155297273487399, -0.0017309474736018071,
              0.0009062844477107923, 0.0009269588800715489, 0.0003236551893266437,
              0.0007698566226528314, 0.0005694416747941133]
    @test mu ≈ mutest

    mu = ret_model(MRet(), Matrix(returns); compound = false)
    mutest = [0.000709977675346526, 0.0007746382686595028, 0.0009753484800445194,
              0.0008974890088837391, 0.0017956125285473906, -0.0005706669410836582,
              0.0018453756491976943, 0.00031058221073110553, 0.0008285462729038383,
              0.000442742392951942, 0.0002631446419061841, -0.00043554694545677394,
              -0.0013430732876448975, -4.376248452713041e-5, -0.0012358294979836018,
              0.0011544951216372085, 0.0010079029335960455, 0.0003844034306609158,
              0.0008621888482796794, 0.0006486846462746492]
    @test mu ≈ mutest

    # Exponential returns.
    mu = ret_model(EMRet(), Matrix(returns); span = 500)
    mutest = [0.0006374763006407047, 0.0009220927701596437, 0.0006646681631425899,
              0.001302377530317811, 0.0018723319487876644, -0.002061008383108298,
              0.0010703399637868038, 0.00044720622951577305, 0.0011968461569153988,
              0.0005206580308783071, 4.138292505451169e-5, -0.0005065094094284239,
              -0.002005000646035593, -5.139201678172611e-5, -0.001362216247220993,
              0.0016463498966041712, 0.0013578359093076031, 0.00037279054675387613,
              0.0011016401802894649, 0.0003773460829119557]
    @test mu ≈ mutest

    mu = ret_model(EMRet(), Matrix(returns); compound = false, span = 500)
    mutest = [0.0006374763006407111, 0.0009220927701595434, 0.0006646681631425893,
              0.001302377530317905, 0.0018723319487877312, -0.002061008383108338,
              0.0010703399637868522, 0.00044720622951572713, 0.0011968461569154484,
              0.0005206580308782243, 4.138292505442201e-5, -0.0005065094094283773,
              -0.0020050006460355933, -5.139201678172075e-5, -0.0013622162472209415,
              0.0016463498966041731, 0.0013578359093076027, 0.00037279054675381314,
              0.0011016401802895139, 0.0003773460829118876]
    @test mu ≈ mutest

    # CAPM rets.
    mu = ret_model(CAPMRet(), Matrix(returns); fix_method = DFix())
    mutest = [0.00035789353911574236, 0.00036086091128900374, 0.000388560378643318,
              0.00042743717610016615, 0.00039640580812827134, 0.00033636466407489216,
              0.0007179550214752526, 0.0002517108814355209, 0.00046066006278775974,
              0.000394484816175617, 0.0002384854397853141, 0.0005435216618442719,
              0.0007399168180262295, 0.00031106907019160164, 0.00054391461675513,
              0.0004289534283024424, 0.0003624625918609763, 0.0002717418146504033,
              0.00040338192122797375, 0.00031928669539223035]
    @test mu ≈ mutest

    mu = ret_model(CAPMRet(), Matrix(returns); fix_method = FFix())
    mutest = [0.00035789353911574193, 0.0003608609112890033, 0.0003885603786433176,
              0.00042743717610016567, 0.0003964058081282709, 0.00033636466407489194,
              0.0007179550214752516, 0.00025171088143552075, 0.00046066006278775936,
              0.0003944848161756165, 0.00023848543978531388, 0.0005435216618442714,
              0.0007399168180262285, 0.00031106907019160136, 0.0005439146167551294,
              0.00042895342830244184, 0.00036246259186097595, 0.0002717418146504031,
              0.00040338192122797326, 0.0003192866953922298]
    @test mu ≈ mutest

    mu = ret_model(CAPMRet(), Matrix(returns); compound = false)
    mutest = [0.0004004033444440577, 0.0004038223404295386, 0.00043573757119759867,
              0.00048053128316640257, 0.0004447770479963404, 0.00037559784886118184,
              0.0008152649427990795, 0.0002780600524203442, 0.0005188105786435597,
              0.00044256368769275315, 0.0002628217441569861, 0.0006142834273403113,
              0.0008405692490530567, 0.0003464523528170275, 0.0006147361886335541,
              0.0004822783037252902, 0.00040566779126140315, 0.00030113962459677455,
              0.000452814901453707, 0.0003559206722359075]
    @test mu ≈ mutest

    mu = ret_model(ECAPMRet(), Matrix(returns); rspan = 500, cspan = 500)
    mutest = [0.00034608068641072537, 0.0003252659785582684, 0.0003595722129251431,
              0.00039976241446097185, 0.00034337235971156294, 0.00031471949035765604,
              0.0005981770675286899, 0.000258499030391065, 0.00039890562970842735,
              0.0003638818337951522, 0.00023358086620845896, 0.0005356155654016215,
              0.0007453655587113264, 0.00026388730784816913, 0.0005101818314985722,
              0.00037254758530913377, 0.0003167007554092522, 0.00025425959101428813,
              0.00035014747082537145, 0.00025469269641794365]
    @test mu ≈ mutest

    mu = ret_model(ECAPMRet(), Matrix(returns); compound = false, rspan = 500, cspan = 500,
                   fix_method = DFix(),)
    mutest = [0.0003460806864106973, 0.0003252659785582425, 0.00035957221292511364,
              0.0003997624144609382, 0.0003433723597115351, 0.0003147194903576313,
              0.0005981770675286354, 0.00025849903039104616, 0.0003989056297083938,
              0.0003638818337951223, 0.0002335808662084427, 0.0005356155654015736,
              0.0007453655587112565, 0.0002638873078481497, 0.0005101818314985269,
              0.0003725475853091029, 0.0003167007554092272, 0.0002542595910142697,
              0.000350147470825343, 0.00025469269641792517]
    @test mu ≈ mutest

    mu = ret_model(ECAPMRet(), Matrix(returns); compound = false, rspan = 500, cspan = 500,
                   fix_method = FFix(),)

    mutest = [0.0003460806864106973, 0.0003252659785582425, 0.00035957221292511364,
              0.0003997624144609382, 0.0003433723597115351, 0.0003147194903576313,
              0.0005981770675286354, 0.00025849903039104616, 0.0003989056297083938,
              0.0003638818337951223, 0.0002335808662084427, 0.0005356155654015736,
              0.0007453655587112565, 0.0002638873078481497, 0.0005101818314985269,
              0.0003725475853091029, 0.0003167007554092272, 0.0002542595910142697,
              0.000350147470825343, 0.00025469269641792517]
    @test mu ≈ mutest

    market_returns = vec(mean(Matrix(returns); dims = 2))
    mu = ret_model(CAPMRet(), Matrix(returns), market_returns)
    mu2 = ret_model(CAPMRet(), Matrix(returns))
    @test mu ≈ mu2

    mu = ret_model(ECAPMRet(), Matrix(returns), market_returns)
    mu2 = ret_model(ECAPMRet(), Matrix(returns))
    @test mu ≈ mu2

    returns = returns_from_prices(df[!, 2:end])
    log_returns = returns_from_prices(df[!, 2:end], true)
    @test exp.(log_returns) .- 1 ≈ returns

    rel_prices = prices_from_returns(Matrix(returns[!, :]))
    rel_prices_log = prices_from_returns(Matrix(log_returns[!, :]), true)
    @test rel_prices ≈ rel_prices_log

    reconstructed_prices = (rel_prices' .* Vector(df[1, 2:end]))'

    @test reconstructed_prices ≈ Matrix(df[!, 2:end])

    target = DiagonalUnequalVariance()
    shrinkage = :lw
    method = LinearShrinkage(target, shrinkage)

    capm_ret = ret_model(CAPMRet(), Matrix(returns); cov_method = CustomCov(),
                         custom_cov_estimator = method)

    @test capm_ret ≈ [0.0003500530563175481, 0.0003529371312678838, 0.0003798590457665346,
                      0.0004176445310874865, 0.000387484245886717, 0.00032912851918879963,
                      0.0007000072384087209, 0.0002468510562667715, 0.0004499348167944588,
                      0.0003856171781759763, 0.00023399686651794568, 0.0005304704045906426,
                      0.0007213525444905749, 0.00030454299893284886, 0.0005308523288484857,
                      0.0004191182205135655, 0.0003544938510004775, 0.00026631970035444403,
                      0.00039426453223665846, 0.0003125299468478898]

    exp_capm_ret = ret_model(ECAPMRet(), Matrix(returns); cspan = 1503, rspan = 1503,
                             cov_method = CustomCov(), custom_cov_estimator = method)
    @test exp_capm_ret ≈
          [0.0003862481057705875, 0.00038951671662014, 0.00042002815038533057,
           0.0004628516031049944, 0.000428670024217332, 0.00036253368424595656,
           0.0007828619442203522, 0.0002692861048273682, 0.0004994471770808623,
           0.000426554018953507, 0.0002547180562160353, 0.0005907206358427605,
           0.0008070532361415433, 0.0003346701579387993, 0.0005911534823513951,
           0.0004645217806592885, 0.0003912809949746522, 0.00029135051798821006,
           0.00043635433128567334, 0.0003437220116733475]

    target = DiagonalCommonVariance()
    shrinkage = :oas
    method = LinearShrinkage(target, shrinkage)

    mean_ret = ret_model(CAPMRet(), Matrix(returns); cov_method = CustomSCov(),
                         custom_cov_estimator = method)
    @test mean_ret ≈ [0.00038252726603508824, 0.0003754498023200042, 0.00042396100499940664,
                      0.00048359953618634676, 0.00041190464492243077, 0.0003881992568747777,
                      0.0007635734067651777, 0.00028838361136730386, 0.0004899563110465849,
                      0.00044615157808058, 0.0002689160343561545, 0.000568644079718417,
                      0.0007665119641210034, 0.0003383207502347108, 0.0006323147057608624,
                      0.0004433533513361271, 0.00037913424319792945, 0.00028928025444460405,
                      0.000418195371443371, 0.0003362004251339706]

    mean_ret = ret_model(ECAPMRet(), Matrix(returns); cspan = 447.5, rspan = 447.5,
                         cov_method = CustomSCov(), custom_cov_estimator = method)

    @test mean_ret ≈ [0.00033311143380312545, 0.0003271846448440664, 0.00036780875427159816,
                      0.00041775107858474516, 0.0003577125524869999, 0.00033786125577860366,
                      0.0006522059782170986, 0.0002542739299299078, 0.00042307435039136535,
                      0.0003863915190623789, 0.00023797144854192055, 0.0004889688314302797,
                      0.0006546667763212205, 0.0002960921426684005, 0.0005422877008213697,
                      0.0003840482362082936, 0.00033027005854517134, 0.0002550247941525577,
                      0.00036298051428655057, 0.00029431654622558167]
end
